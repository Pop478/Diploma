import os
from http.client import HTTPException
from typing import Union, List
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import (
    ChatType, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
    KeyboardButton, ReplyKeyboardMarkup, ParseMode, ContentType, WebAppInfo, InputFile
)
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import asyncpg
from datetime import datetime, timedelta
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import FileIsTooBig
from aiogram.utils.markdown import escape_md
from pydantic import BaseModel
import asyncio
from fastapi import FastAPI
from uvicorn import Config, Server

app = FastAPI()

API_TOKEN = '7736688982:AAHRHBOEwW25T6hoTbACEnA6jsGebkgeB6w'

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

db_pool = None

class OrderState(StatesGroup):
    waiting_for_advertisement = State()

async def create_db_pool():
    global db_pool
    try:
        db_pool = await asyncpg.create_pool(
            user=os.getenv('DB_USER', 'postgres'),
            password=os.getenv('DB_PASSWORD', 'Stepan110104'),
            database=os.getenv('DB_NAME', 'diploma'),
            host=os.getenv('DB_HOST', 'localhost'),
            port=os.getenv('DB_PORT', '5432'),
            min_size=1,
            max_size=10
        )
        logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

@dp.message_handler(content_types=types.ContentType.VIDEO)
async def get_video_id(message: types.Message):
    await message.answer(message.video.file_id)  # –í—ã–≤–µ–¥–µ—Ç –Ω–æ–≤—ã–π file_id –≤ –∫–æ–Ω—Å–æ–ª—å


from aiogram import types
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from aiogram import types
import logging
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    # –°–æ–∑–¥–∞–µ–º Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–µ–±-—Å–∞–π—Ç–æ–º
    inline_keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ë–∏—Ä–∂–∞", web_app=types.WebAppInfo(url="https://marusinohome.ru"))  # –ó–∞–º–µ–Ω–∏ —Å—Å—ã–ª–∫—É
    )

    # –°–æ–∑–¥–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    button_orders = KeyboardButton('–ü—Ä–æ—Ñ–∏–ª—å')
    button_tests = KeyboardButton('–¢–µ—Å—Ç—ã')
    button_athletes = KeyboardButton('–°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã')
    button_support = KeyboardButton('–ü–æ–¥–¥–µ—Ä–∂–∫–∞')

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(button_orders, button_tests, button_athletes, button_support)

    # –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    text = (
        "<b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –±–∏—Ä–∂—É —Ä–µ–∫–ª–∞–º—ã <a href='https://t.me/Carrot'>@Carrot</a></b>\n\n"
        "üíº –ü–æ–∫—É–ø–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –≤ <b>–æ–¥–∏–Ω –∫–ª–∏–∫!</b>\n"
        "üí∞ –†–µ–∑–µ—Ä–≤ —Å—Ä–µ–¥—Å—Ç–≤ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Äì <b>–±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–¥–µ–ª–∫–∞</b>.\n"
        "üì¢ –ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º—É –≤ —Å–≤–æ–∏—Ö Telegram-–∫–∞–Ω–∞–ª–∞—Ö –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ.\n"
        "üíé –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ TON –Ω–∞ —Å–≤–æ–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –ø—Ä—è–º–æ –≤ Telegram!\n\n"
        "<b>üìä –ë—ã—Å—Ç—Ä–æ. –£–¥–æ–±–Ω–æ. –ù–∞–¥–µ–∂–Ω–æ.</b>"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–µ—Ä–µ–¥ –≤–∏–¥–µ–æ
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    args = message.get_args()
    trainer_id = None

    if args and args.startswith("ref"):
        try:
            trainer_id = int(args[3:])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–µ–Ω–µ—Ä–∞
        except ValueError:
            trainer_id = None  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è

    try:
        async with db_pool.acquire() as connection:
            if trainer_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ trainer_id, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
                # –ü–æ–ª—É—á–∞–µ–º ID —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã trainers
                trainer = await connection.fetchrow(
                    "SELECT id FROM trainers WHERE user_id = $1",
                    trainer_id
                )

                if not trainer:
                    await message.answer("‚ùå –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                trainer_id = trainer["id"]  # –ü–æ–ª—É—á–∞–µ–º ID —Ç—Ä–µ–Ω–µ—Ä–∞

                # –û–±–Ω–æ–≤–ª—è–µ–º trainer_id —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await connection.execute(
                    "UPDATE users SET trainer_id = $1 WHERE user_id = $2",
                    trainer_id, user_id
                )

                response = "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É!"
                response += f"\n–¢–µ–ø–µ—Ä—å –≤–∞—à —Ç—Ä–µ–Ω–µ—Ä ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {trainer_id}."

                await message.answer(response)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞: {e}")
        await message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞.")




@dp.message_handler(lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å")
async def user_profile(message: types.Message):
    user_id = message.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –≤ trainers
        async with db_pool.acquire() as connection:
            user = await connection.fetchrow(
                """
                SELECT u.user_id, u.first_name, t.user_id AS trainer_id 
                FROM users u 
                LEFT JOIN trainers t ON t.user_id = u.user_id 
                WHERE u.user_id = $1
                """, 
                user_id
            )

        if not user:
            await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        response = (
            f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"üÜî ID: {(user['user_id'])}\n"
            f"üë§ –ò–º—è: {(user['first_name'])}\n"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = types.InlineKeyboardMarkup(row_width=1)

        # –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ñ–æ—Ç–æ
        keyboard.add(types.InlineKeyboardButton(text="üñº –°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="change_photo"))

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ trainers, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
        if user["trainer_id"]:
            keyboard.add(types.InlineKeyboardButton(text="üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", callback_data="get_invite_link"))

        await message.answer(response, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.")

@dp.callback_query_handler(lambda c: c.data == "get_invite_link")
async def send_invite_link(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    invite_link = f"https://t.me/OrthoTest_bot?start=ref{user_id}"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–æ–π
    new_response = (
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"üÜî ID: {user_id}\n"
        f"üîó –í–∞—à–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞:\n<code>{invite_link}</code>\n\n"
        f"–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–∑—å—è–º!"
    )

    await callback_query.message.edit_text(new_response, parse_mode="HTML")
    await callback_query.answer("üéâ –í–∞—à–∞ –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞!")


@dp.message_handler(commands=['addtrainer'])
async def add_trainer_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã /addtrainer ref<id>
    args = message.get_args()
    trainer_id = None

    if args and args.startswith("ref"):
        try:
            trainer_id = int(args[3:])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç—Ä–µ–Ω–µ—Ä–∞
        except ValueError:
            pass  # –ï—Å–ª–∏ ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    if not trainer_id:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    try:
        async with db_pool.acquire() as connection:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
            await connection.execute(
                "Update users SET trainer_id = $1",
                trainer_id
            )

            response = "üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É!"
            if trainer_id:
                response += f"\n–¢–µ–ø–µ—Ä—å –≤–∞—à —Ç—Ä–µ–Ω–µ—Ä ‚Äì –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {trainer_id}."

            await message.answer(response)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /addtrainer: {e}")
        await message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞.")



@dp.callback_query_handler(lambda callback_query: callback_query.data == "change_photo")
async def my_orders(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    try:
        async with db_pool.acquire() as connection:
            user = await connection.fetchrow(
                "SELECT uuid FROM users WHERE user_id = $1", user_id
            )

        if user:
            user_uuid = user['uuid']
            photos = await bot.get_user_profile_photos(user_id)

            if photos.total_count > 0:
                file_id = photos.photos[0][0].file_id
                file = await bot.get_file(file_id)
                file_path = file.file_path

                save_directory = 'static'
                if not os.path.exists(save_directory):
                    os.makedirs(save_directory)

                save_path = os.path.join(save_directory, f'user_{user_uuid}.png')

                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if os.path.exists(save_path):
                    os.remove(save_path)

                # –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
                await bot.download_file(file_path, save_path)

                await callback_query.message.answer("‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            else:
                await callback_query.message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
        else:
            await callback_query.message.answer("üö® –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
    except FileIsTooBig:
        await callback_query.message.answer("‚ùå –í–∞—à–µ —Ñ–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–æ—Ç–æ: {e}")
        await callback_query.message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–æ—Ç–æ.")


@dp.message_handler(lambda message: message.text == "–°–ø–æ—Ä—Ç—Å–º–µ–Ω—ã")
async def show_athletes(message: types.Message):
    user_id = message.from_user.id

    try:
        async with db_pool.acquire() as connection:
            # –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ —Ç—Ä–µ–Ω–µ—Ä—É
            athletes = await connection.fetch("""
                SELECT u.user_id, u.first_name 
                FROM users AS u
                JOIN groups g ON g.id = u.group_id
                JOIN trainers t ON t.id = g.trainer_id
                WHERE t.user_id = $1
            """, user_id)

        if not athletes:
            await message.answer("üö® –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤.")
            return

        # –°–æ–∑–¥–∞—ë–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for athlete in athletes:
            keyboard.add(types.InlineKeyboardButton(text=athlete["first_name"], callback_data=f"athlete_{athlete['user_id']}"))

        await message.answer("üèÜ –í–∞—à–∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã:", reply_markup=keyboard)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤: {e}")
        await message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")


@dp.callback_query_handler(lambda call: call.data.startswith("athlete_"))
async def show_athlete_info(call: types.CallbackQuery):
    athlete_id = int(call.data.split("_")[1])

    try:
        async with db_pool.acquire() as connection:
            # –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–µ
            athlete = await connection.fetchrow(
                "SELECT first_name, last_name, rank, birth_date FROM users WHERE user_id = $1", athlete_id
            )

        if not athlete:
            await call.message.answer("üö® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏—Ö
        full_name = f"{athlete['first_name']} {athlete['last_name']}"
        rank = athlete['rank'] if athlete['rank'] else "–ù–µ —É–∫–∞–∑–∞–Ω"
        birth_date = athlete['birth_date'].strftime('%d.%m.%Y') if athlete['birth_date'] else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–µ
        athlete_text = (
            f"üèÖ <b>–°–ø–æ—Ä—Ç—Å–º–µ–Ω</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {full_name}\n"
            f"ü•á <b>–ó–≤–∞–Ω–∏–µ:</b> {rank}\n"
            f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birth_date}\n"
        )

        await call.message.answer(athlete_text, parse_mode="HTML")
        await call.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–µ: {e}")
        await call.message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")


# @dp.callback_query(dp.data == "change_photo")
# async def change_photo_callback(call: CallbackQuery, connection):
#     await call.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è.")
#     await call.answer()

#     @dp.message(F.photo)
#     async def save_new_photo(message: Message, connection):
#         user_id = message.from_user.id
#         photo_id = message.photo[-1].file_id

#         await connection.execute("UPDATE users SET photo = $1 WHERE id = $2", photo_id, user_id)
#         await message.answer("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")

#         # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
#         user = await connection.fetchrow("SELECT id, name, registration_date, balance, photo FROM users WHERE id = $1", user_id)

#         profile_text = (
#             f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
#             f"üÜî ID: {(user['id'])}\n"
#             f"üë§ –ò–º—è: {(user['name'])}\n"
#             f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {(user['registration_date'])}\n"
#             f"üí∞ –ë–∞–ª–∞–Ω—Å: {(user['balance'])} –º–æ–Ω–µ—Ç\n"
#         )

#         keyboard = InlineKeyboardMarkup(
#             inline_keyboard=[
#                 [InlineKeyboardButton(text="üñº –°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="change_photo")]
#             ]
#         )

#         await message.answer_photo(
#             photo=photo_id,
#             caption=profile_text,
#             parse_mode="HTML",
#             reply_markup=keyboard
#         )

@dp.message_handler(commands=["menu"])
async def menu_handler(message: types.Message):
    user_id = message.from_user.id

    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        f"üë§ <b>–ò–º—è:</b> Strep\n"
        # f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> 10 TON\n"
        f"üìÜ <b>–°—Ç–∞–∂:</b> 5 –º–µ—Å—è—Ü–µ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    # Inline-–∫–Ω–æ–ø–∫–∏ 4 –∫–Ω–æ–ø–∫–∏, –ø–æ 2 –≤ —Ä—è–¥
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="üì¢ –†–µ–∫–ª–∞–º—ã", callback_data="ads"),
            types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        ],
        [
            types.InlineKeyboardButton(text="üì° –ö–∞–Ω–∞–ª—ã", callback_data="channels"),
            types.InlineKeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
        ]
    ])

    await message.answer(text, reply_markup=keyboard, parse_mode="HTML")



# @dp.message_handler(commands=['myProfile'])
# async def send_welcome(message: types.Message):
#     user_id = message.from_user.id
#
#     pay_button = InlineKeyboardMarkup().add(
#         InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", web_app=WebAppInfo(url=f"https://tma.internal/user/4526c40d-3bb8-45ac-af4f-d751e64aceb3"))
#     )
#
#     await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é: —Ç—É—Ç(https://t.me/TeleAdMarketBot/tma.internal/user/4526c40d-3bb8-45ac-af4f-d751e64aceb3)", reply_markup=pay_button)




@dp.callback_query_handler(lambda callback_query: callback_query.data == "my_orders")
async def my_orders(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    try:
        async with db_pool.acquire() as connection:
            orders = await connection.fetch(
                """SELECT o.order_id, o.total_price, o.status, o.created_at
                   FROM Orders o WHERE o.user_id = $1 AND status = 'waiting'
                   ORDER BY o.created_at DESC""", user_id
            )

            if orders:
                response = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:"
                keyboard = InlineKeyboardMarkup()
                for order in orders:
                    formatted_price = f"{order['total_price']:,.0f}".replace(",", " ")
                    button_text = f"–ó–∞–∫–∞–∑ ‚Ññ{order['order_id']} - {formatted_price}ton."
                    callback_data = f"order_{order['order_id']}"
                    keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))

                await callback_query.message.answer(response, reply_markup=keyboard)
            else:
                await callback_query.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤.")



class OrderRequest(BaseModel):
    user_id: int
    order_id: int

@app.post('/order')
async def handle_order(order: OrderRequest):
    user_id = order.user_id
    order_id = order.order_id

    try:
        async with db_pool.acquire() as connection:
            result = await connection.fetchrow(
                """SELECT p.user_id
                   FROM Products p
                   JOIN OrderItems oi ON oi.product_id = p.product_id
                   JOIN Orders o ON o.order_id = oi.order_id
                   WHERE o.order_id = $1""", order_id
            )

        if result:
            target_user_id = result['user_id']

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                user_id,
                "‚úÖ –í–∞—à–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É –¥–ª—è —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. "
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏."
            )

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSMContext —á–µ—Ä–µ–∑ dispatcher, –∞ –Ω–µ –Ω–∞–ø—Ä—è–º—É—é –≤ FastAPI
            state = dp.current_state(user=user_id)
            await state.update_data(target_user_id=target_user_id, order_id=order_id)
            await state.set_state(OrderState.waiting_for_advertisement)

        else:
            await bot.send_message(user_id, "‚ùå –ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return {"status": "error", "message": "Order not found"}

        return {"status": "success", "message": "Message sent and data saved"}

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


async def start_fastapi():
    config = Config(app=app, host="0.0.0.0", port=5001, log_level="info")
    server = Server(config)
    await server.serve()

async def start_bot():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è executor.start_polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    async def main():
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await create_db_pool()

        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ FastAPI –∏ Aiogram
        await asyncio.gather(
            start_fastapi(),  # –ó–∞–ø—É—Å–∫ FastAPI
            start_bot()       # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        )

    asyncio.run(main())


